//> This package enables base64 encoding and decoding of strings:
//>
//>     Get EncodeString of oBase64Functions sValue to sValue
//>     Get DecodeString of oBase64Functions sValue to sValue
//>
//> Remember to set the "max argument size" if dealing with very large
//> strings.
//>
//> For 17.1 and later the functionality of this package is based on two functions (Base64Encode and
//> Base64Decode) that are built into the runtime.
//>
//> But for versions up to and including 17.0 it's based on the vdfBase64.dll file that was obtained
//> from DAE that have kindly allowed me to distribute it to other DF developers. Programs including
//> this package will give off an error on start-up if vdfBase64.dll is not found in the /bin folder
//> if the VDF runtime. You will find the DLL in the /programs folder of the StureApsPublicLib workspace

Use VdfBase.pkg

// Functions in vdfBase64.dll
External_Function xxBase64Encode "vdfbase64Encode" vdfBase64.dll Pointer pBuffer Returns Integer
External_Function xxBase64Decode "vdfbase64Decode" vdfBase64.dll Pointer pBuffer Returns Integer
External_Function xxBase64Free   "vdfbase64Free"   vdfBase64.dll Pointer pBuffer Returns Integer

// Structure
Struct txxfBase64Buffer
    Pointer pData
    Integer iLength
End_Struct  // txxfBase64Buffer

Global_Variable Integer oBase64Functions

Object _oBase64Functions is a cObject
    Move Self to oBase64Functions

#IFNDEF get_Base64Encode
            Procedure _TestDllPresent
                Boolean bFileExists
                String sDllPath
                get_profile_string "Defaults" "VdfRootDir" to sDllPath
                If (not(Right(sDllPath,1)="\")) Begin
                    Move (sDllPath+"\") to sDllPath
                End
                Move (sDllPath+"bin\vdfbase64.dll") to sDllPath
                File_Exist sDllPath bFileExists
                If (not(bFileExists)) Begin
                    Error DFERR_PROGRAM ("DLL file not found: "+sDllPath)
                End
            End_Procedure
            Send _TestDllPresent // Test on program initialization
#ENDIF

    Function EncodeString String sValue Returns String
#IFDEF get_Base64Encode
        Address pBase64
        String sResult
        Integer iVoid
        If (sValue<>"") Begin
            Move (Base64Encode(AddressOf(sValue), Length(sValue))) to pBase64
            Move pBase64 to sResult
            Move (Free(pBase64)) to iVoid
        End
        Function_Return sResult
#ELSE
        Integer iGarbage
        String sReturn
        txxfBase64Buffer strBuffer
        If (sValue<>"") Begin
            Move (AddressOf(sValue)) to strBuffer.pData
            Move (Length(sValue)) to strBuffer.iLength
            If (strBuffer.iLength>0) Begin // Can't call with empty string
                Move (xxBase64Encode(AddressOf(strBuffer))) to iGarbage
                Move (Repeat(Character(0),strBuffer.iLength)) to sReturn
                Move (CopyMemory(AddressOf(sReturn),strBuffer.pData,strBuffer.iLength)) to iGarbage
                Move (xxBase64Free(AddressOf(strBuffer))) to iGarbage
                // I don't know why the following is necessary to avoid an embedded
                // character(0) at the last but one character. But it is:
                Move (Pos(Character(0),sReturn)) to iGarbage
                If (iGarbage>0) Begin
                    Move (Left(sReturn,iGarbage-1)) to sReturn
                End
            End
        End
        Function_Return sReturn
#ENDIF
    End_Function

    Function DecodeString String sValue Returns String
#IFDEF get_Base64Encode
        Address pBinary
        String sBinary
        Integer iVoid iLen
        If (sValue<>"") Begin
            Move (Base64Decode(AddressOf(sValue), &iLen)) to pBinary
            Move (Repeat(Character(0), iLen)) to sBinary
            Move (MemCopy(AddressOf(sBinary), pBinary, iLen)) to iVoid
            Move (Free(pBinary)) to iVoid    
        End
        Function_Return sBinary
#ELSE
        Integer iGarbage
        String sReturn
        txxfBase64Buffer strBuffer
        If (sValue<>"") Begin
            Move (AddressOf(sValue)) to strBuffer.pData
            Move (Length(sValue)) to strBuffer.iLength
            If (strBuffer.iLength>0) Begin // Can't call with empty string
                Move (xxBase64Decode(AddressOf(strBuffer))) to iGarbage
                Move (Repeat(Character(0),strBuffer.iLength)) to sReturn
                Move (CopyMemory(AddressOf(sReturn),strBuffer.pData,strBuffer.iLength)) to iGarbage
                Move (xxBase64Free(AddressOf(strBuffer))) to iGarbage
            End
        End
        Function_Return sReturn
#ENDIF
    End_Function

End_Object

